package com.eussi.ch01_introduction;

/**
 * @author wangxueming
 * @create 2019-10-17 0:06
 * @description
 */
public class Introduction {
    /**
     * 数据结构和算法能起到什么作用?
     *      数据结构是对在计算机内存中(有时在磁盘中)的数据的一种
     * 安排。数据结构包括数组、链表、栈、二又树、哈希表等等。
     *      算法对这些结构中的数据进行各种处
     * 理,例如,查找一条特殊的数据项或对数据进行排序。
     *
     * 掌握这些知识以后,粗路地估计一下,上述知识可以用于下面三类情况:
     * 1、现实世界数据存储
     *      现实中的数据指的是那些描述处于计算机外部的物理实例的数据
     * 2、程序员的工具
     *      并不是所有的存储结构都用来存储现实世界的数据。通常情况下,现实世界的数据或多或少会
     * 由程序的用户直接存取。但是有些数据存储结构并不打算让用户接触,它们仅被程序本身所使用。
     * 程序员经常将诸如栈、队列和优先级队列等结构当作工具来简化另一些操作。
     * 3、现实世界的建模
     *      有些数据结构能直接对真实世界的情况构造模型。其中最重要的数据结构是图。图可以用来表
     * 示城市之间的航线,电路中的连接,或是某一工程中的任务安排关系。
     *
     * 这些并不是必须遵循的分类,但它们可以体现出后面内容的实用性和重要性。
     *
     *
     * 数据结构概述：
     *      数据结构                优点                                       缺点
     *      数组                    插入快,如果知道下标,可以非常快地存取         查找慢,删除慢,大小固定
     *      有序数组                比无序的数组查找快                          删除和插入慢,大小固定
     *      栈                     提供后进先出方式的存取                       存取其他项很慢
     *      队列                   提供先进先出方式的存取                       存取其他项很慢
     *      链表                   插入快,删除快                               查找慢
     *      二叉树                 查找、插入、删除都快(如果树保持平衡)           删除算法复杂
     *      红-黑树                查找、插入、删除都快。树总是平衡的             算法复杂
     *      23-4树                 查找、插入、删除都快。树总是平衡的。          类似的算法复杂
     *                             树对磁盘存储有用
     *      哈希表                 如果关键字已知则存取极快。插入快               删除慢,如果不知道关键字则存取很慢,对存储空间使用不充分
     *      堆                     插入、删除快,对最大数据项的存取很快            对其他数据项存取慢
     *      图                     对现实世界建模                               有些算法慢且复杂
     *
     *
     * 算法的概述
     *      许多将要讨论到的算法直接适用于某些特殊的数据结构。对于大多数数据结构来说,都需要知道如何
     *          插入一条新的数据项
     *          寻找某一特定的数据项
     *          删除某一特定的数据项
     *          还需要知道如何迭代地访问某一数据结构中的各数据项,以便进行显示或其他操作。
     *      另一种重要的算法范畴是排序,排序有许多种算法,
     *      递归的概念在设计某些算法时十分重要。递归意味着一个方法调用它自身。
     *
     *
     * 软件工程
     *      在数据结构和算法的书中时兴将以软件工程为内容的一章作为开场白。我们不打算
     * 采用这种方式,但是还会简要地讨论一下软件工程,并简述它同本书中的内容是如何相关的。
     *      软件工程研究的是由许多程序员参与的大型复杂的计算机程序的创建方法。它强调的是程序的
     * 整体设计和如何依照最终用户需求而进行设计的问题。软件工程关系着一个软件项目的整个生命周
     * 期,包括分析、设计、验证、编码、测试、生产和维护各阶段。
     *      将软件工程与数据结构和算法的知识融合在一起对学习这两个不同的主题是否有帮助,现
     * 在还不得而知。除非参加一个大型的项目,否则软件工程相当抽象,很难被领悟。但是另一方面,
     * 数据结构和算法却是有关编程和数据存储的细致入微的基本规则。
     *      因此,我们将精力集中在数据结构和算法的精华所在。它们是如何工作的?在特定的情况下,
     * 哪种结构或算法是最好的?
     *
     *
     * 面向对象编程
     *      过程性语言的问题
     *      面向对象编程语言的产生是由于发现过程性语言(诸如C、 Pascal和早期版本的Bac)在处理
     * 大型的复杂问题时有些力不从心。为什么会这样呢?
     *      一是程序与现实世界缺乏对应关系，对现实世界建模的无能为力
     *      二是程序内部的结构出现了问题，粗糙的组织结构
     *
     */
}
